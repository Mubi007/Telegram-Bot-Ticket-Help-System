"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Telegram
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ aiogram 3 —Å –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ —É–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config import BOT_TOKEN
from database import db
from handlers import common, user, admin, agent, admin_callbacks


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()


async def on_startup():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.create_tables()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = await bot.get_me()
    logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
    from config import ADMINS
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                "üöÄ <b>–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–∏–∫–µ—Ç —Å–∏—Å—Ç–µ–º—É",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")


async def on_shutdown():
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    from config import ADMINS
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                "üõë <b>–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
        dp.include_router(user.router)
        dp.include_router(agent.router)
        dp.include_router(admin.router)
        dp.include_router(admin_callbacks.router)
        dp.include_router(common.router)  # –ü–æ—Å–ª–µ–¥–Ω–∏–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
