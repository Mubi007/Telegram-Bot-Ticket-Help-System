"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""

import math
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from keyboards.admin import (
    get_admin_panel, get_admin_tickets_keyboard, get_admin_ticket_actions,
    get_admin_stats_keyboard, get_admin_manage_keyboard, get_admin_search_keyboard,
    get_confirm_action_keyboard, get_admin_quick_responses
)
from keyboards.user import get_cancel_keyboard, get_main_menu
from keyboards.reply import (
    get_admin_main_keyboard, get_admin_user_management_keyboard,
    get_cancel_keyboard as get_reply_cancel_keyboard, get_confirmation_keyboard
)
from database import db
from utils.texts import (
    ADMIN_TICKETS_MESSAGE, TICKET_DETAILS_MESSAGE, TICKET_CATEGORIES,
    TICKET_STATUSES, TICKET_RESPONSE_MESSAGE, ERROR_MESSAGE, PERMISSION_DENIED
)
from handlers.common import AdminStates
from config import ADMINS, TICKETS_PER_PAGE


# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–≥–µ–Ω—Ç–æ–≤
async def check_agent_or_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_role = await db.get_user_role(user_id)
    return user_role in ['agent', 'admin']


router = Router()


async def check_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_role = await db.get_user_role(user_id)
    return user_role == 'admin'


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò REPLY –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù–ê =====

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", StateFilter(None))
async def handle_admin_users_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not await check_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_admin_main_keyboard())
        return
    
    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_user_management_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", StateFilter(None))
async def handle_admin_settings_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not await check_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_admin_main_keyboard())
        return
    
    from keyboards.admin import get_admin_settings_keyboard
    
    settings_text = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: 1000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: 5
‚Ä¢ –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
"""
    
    await message.answer(
        settings_text,
        reply_markup=get_admin_settings_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", StateFilter(None))
async def handle_list_users_button(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_admin_main_keyboard())
        return
    
    await show_users_list(message)


@router.message(F.text == "üë®‚Äçüíº –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤", StateFilter(None))
async def handle_list_agents_button(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤"""
    if not await check_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_admin_main_keyboard())
        return
    
    await show_agents_list(message)


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–ª–µ–π", StateFilter(None))
async def handle_roles_stats_button(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º"""
    if not await check_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_admin_main_keyboard())
        return
    
    await show_roles_statistics(message)


@router.message(F.text == "üè† –ê–¥–º–∏–Ω –º–µ–Ω—é", StateFilter(None))
async def handle_admin_menu_button(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    if not await check_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_admin_main_keyboard())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_ticket_stats()
    
    stats_text = f"""
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {stats.get('total', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö: {stats.get('status_new', 0)}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {stats.get('status_in_progress', 0)}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {stats.get('status_waiting_response', 0)}
‚Ä¢ –†–µ—à–µ–Ω–æ: {stats.get('status_resolved', 0)}
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: {stats.get('status_closed', 0)}
"""
    
    from utils.texts import ADMIN_PANEL_MESSAGE
    await message.answer(
        ADMIN_PANEL_MESSAGE.format(stats=stats_text),
        reply_markup=get_admin_main_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text.in_(["üÜï –ù–æ–≤—ã–µ", "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]), StateFilter(None))
async def handle_admin_quick_buttons(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞"""
    if not await check_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_admin_main_keyboard())
        return
    
    if message.text == "üÜï –ù–æ–≤—ã–µ":
        await show_new_tickets_admin(message)
    elif message.text == "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ":
        await show_active_tickets_admin(message)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_admin_stats_detailed(message)


@router.message(F.text == "üîç –ü–æ–∏—Å–∫", StateFilter(None))
async def handle_admin_search_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–º"""
    if not await check_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_admin_main_keyboard())
        return
    
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_reply_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_search)


@router.message(AdminStates.waiting_search)
async def process_admin_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –∞–≥–µ–Ω—Ç–æ–º"""
    if not await check_agent_or_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED)
        await state.clear()
        return
        
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user_role = await db.get_user_role(message.from_user.id)
        if user_role == 'admin':
            keyboard = get_admin_main_keyboard()
        else:
            keyboard = get_agent_main_keyboard(show_admin_return=True)
        await message.answer(
            "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=keyboard
        )
        return
    
    try:
        ticket_id = int(message.text.strip())
        ticket = await db.get_ticket(ticket_id)
        
        if not ticket:
            user_role = await db.get_user_role(message.from_user.id)
            if user_role == 'admin':
                keyboard = get_admin_main_keyboard()
            else:
                keyboard = get_agent_main_keyboard(show_admin_return=True)
            await message.answer(
                f"‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=keyboard
            )
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        await show_ticket_for_admin(message, ticket)
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
            reply_markup=get_reply_cancel_keyboard()
        )


async def show_ticket_for_admin(message: Message, ticket: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await db.get_user(ticket['user_id'])
        user_name = user['first_name'] if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        status_emoji = get_status_emoji(ticket['status'])
        category_name = TICKET_CATEGORIES.get(ticket['category'], ticket['category'])
        status_name = TICKET_STATUSES.get(ticket['status'], ticket['status'])
        
        created_at = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m.%Y %H:%M")
        
        details_text = f"""
üé´ <b>–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket['id']}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}
üìã <b>–¢–µ–º–∞:</b> {ticket['subject']}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}
‚è∞ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{ticket['description'][:300]}...
"""
        
        await message.answer(
            details_text,
            reply_markup=get_admin_main_keyboard(),
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline –º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
        from keyboards.admin import get_admin_ticket_actions
        user_role = await db.get_user_role(message.from_user.id)
        await message.answer(
            "üéØ <b>–î–µ–π—Å—Ç–≤–∏—è —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º:</b>",
            reply_markup=get_admin_ticket_actions(
                ticket['id'], 
                ticket['status'],
                ticket.get('assigned_admin'),
                message.from_user.id,
                user_role=user_role
            ),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_admin_main_keyboard()
        )


async def show_new_tickets_admin(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    await show_admin_tickets(message, "new")


async def show_active_tickets_admin(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    await show_admin_tickets(message, "active")


async def show_admin_tickets(message: Message, ticket_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        if ticket_type == "new":
            tickets = await db.get_pending_tickets(20)
            tickets = [t for t in tickets if t['status'] == 'new']
            title = "üÜï –ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"
        elif ticket_type == "active":
            tickets = await db.get_pending_tickets(20)
            tickets = [t for t in tickets if t['status'] in ['in_progress', 'waiting_response']]
            title = "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"
        else:  # closed
            tickets = []
            title = "‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"
        
        if not tickets:
            message_text = f"<b>{title}</b>\n\nüì≠ –û–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            keyboard = get_admin_main_keyboard()
        else:
            tickets_list = ""
            for i, ticket in enumerate(tickets, 1):
                status_emoji = get_status_emoji(ticket['status'])
                priority_emoji = get_priority_emoji(ticket.get('priority', 'medium'))
                user_name = ticket.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                created_date = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m")
                
                tickets_list += f"{i}. {priority_emoji}{status_emoji} <b>#{ticket['id']}</b>\n"
                tickets_list += f"   üë§ {user_name} | üìÖ {created_date}\n"
                tickets_list += f"   üìù {ticket['subject'][:50]}...\n\n"
            
            message_text = f"<b>{title}</b>\n\n{tickets_list}"
            keyboard = get_admin_main_keyboard()
        
        await message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è
        if tickets:
            from keyboards.admin import get_admin_tickets_keyboard
            user_role = await db.get_user_role(message.from_user.id)
            await message.answer(
                "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>",
                reply_markup=get_admin_tickets_keyboard(tickets, ticket_type, user_role),
                parse_mode="HTML"
            )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_admin_main_keyboard(),
            parse_mode="HTML"
        )


def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    emojis = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'waiting_response': '‚è∞',
        'resolved': '‚úÖ',
        'closed': 'üîí'
    }
    return emojis.get(status, '‚ùì')


def get_priority_emoji(priority: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    emojis = {
        'high': 'üî¥',
        'medium': 'üü°',
        'low': 'üü¢'
    }
    return emojis.get(priority, 'üü°')


async def show_admin_stats_detailed(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        stats = await db.get_ticket_stats()
        
        stats_text = f"""
üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üìà –¢–µ–∫—É—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>
‚Ä¢ üÜï –ù–æ–≤—ã–µ: {stats.get('status_new', 0)}
‚Ä¢ ‚è≥ –í —Ä–∞–±–æ—Ç–µ: {stats.get('status_in_progress', 0)}
‚Ä¢ ‚è∞ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {stats.get('status_waiting_response', 0)}

<b>üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:</b>
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ: {stats.get('status_resolved', 0)}
‚Ä¢ üîí –ó–∞–∫—Ä—ã—Ç—ã–µ: {stats.get('status_closed', 0)}

<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {stats.get('total', 0)}
‚Ä¢ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {stats.get('status_new', 0) + stats.get('status_waiting_response', 0)}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>
"""
        
        await message.answer(
            stats_text,
            reply_markup=get_admin_main_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_admin_main_keyboard(),
            parse_mode="HTML"
        )


# ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =====

async def show_users_list(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ database.py)
        # –ü–æ–∫–∞ –ø–æ–∫–∞–∂–µ–º –∑–∞–≥–ª—É—à–∫—É
        users_text = """
üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>
"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
        from config import ADMINS
        for admin_id in ADMINS:
            user = await db.get_user(admin_id)
            if user:
                name = user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                users_text += f"‚Ä¢ {name} (ID: {admin_id})\n"
        
        users_text += "\n<b>–ê–≥–µ–Ω—Ç—ã:</b>\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        agents = await db.get_agents()
        if agents:
            for agent in agents:
                users_text += f"‚Ä¢ {agent.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {agent['user_id']})\n"
        else:
            users_text += "‚Ä¢ –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n"
        
        users_text += f"\n<i>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {await count_total_users()}</i>"
        
        await message.answer(
            users_text,
            reply_markup=get_admin_user_management_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_admin_user_management_keyboard()
        )


async def show_agents_list(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        agents = await db.get_agents()
        
        if not agents:
            agents_text = """
üë®‚Äçüíº <b>–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤</b>

üì≠ –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≥–µ–Ω—Ç–∞" –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
"""
        else:
            agents_text = "üë®‚Äçüíº <b>–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤</b>\n\n"
            for i, agent in enumerate(agents, 1):
                name = agent.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                username = f"@{agent['username']}" if agent.get('username') else "–±–µ–∑ username"
                created = datetime.fromisoformat(agent['created_at']).strftime("%d.%m.%Y")
                
                agents_text += f"{i}. <b>{name}</b>\n"
                agents_text += f"   ID: {agent['user_id']} | {username}\n"
                agents_text += f"   –î–æ–±–∞–≤–ª–µ–Ω: {created}\n\n"
        
        await message.answer(
            agents_text,
            reply_markup=get_admin_user_management_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_admin_user_management_keyboard()
        )


async def show_roles_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º"""
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        from config import ADMINS
        
        admins_count = len(ADMINS)
        agents = await db.get_agents()
        agents_count = len(agents)
        
        total_users = await count_total_users()
        clients_count = total_users - admins_count - agents_count
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º</b>

<b>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b> {admins_count}
<b>üë®‚Äçüíº –ê–≥–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> {agents_count}
<b>üë§ –ö–ª–∏–µ–Ω—Ç—ã:</b> {clients_count}

<b>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {admins_count + agents_count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}

<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>
"""
        
        await message.answer(
            stats_text,
            reply_markup=get_admin_user_management_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_admin_user_management_keyboard()
        )


async def count_total_users() -> int:
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        return await db.count_total_users()
    except:
        return 0


@router.callback_query(F.data == "admin_new_tickets")
async def show_new_tickets(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    await show_admin_tickets(callback, "new")


@router.callback_query(F.data == "admin_active_tickets")
async def show_active_tickets(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    await show_admin_tickets(callback, "active")


@router.callback_query(F.data == "admin_closed_tickets")
async def show_closed_tickets(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    await show_admin_tickets(callback, "closed")


async def show_admin_tickets(callback: CallbackQuery, ticket_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        if ticket_type == "new":
            tickets = await db.get_pending_tickets(20)
            tickets = [t for t in tickets if t['status'] == 'new']
            title = "üÜï –ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"
        elif ticket_type == "active":
            tickets = await db.get_pending_tickets(20)
            tickets = [t for t in tickets if t['status'] in ['in_progress', 'waiting_response']]
            title = "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"
        else:  # closed
            tickets = await db.get_closed_tickets(20)
            title = "‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"
        
        if not tickets:
            message_text = f"<b>{title}</b>\n\nüì≠ –û–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            keyboard = get_admin_panel()
        else:
            tickets_list = ""
            for i, ticket in enumerate(tickets, 1):
                status_emoji = get_status_emoji(ticket['status'])
                priority_emoji = get_priority_emoji(ticket.get('priority', 'medium'))
                user_name = ticket.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                created_date = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m")
                
                tickets_list += f"{i}. {priority_emoji}{status_emoji} <b>#{ticket['id']}</b>\n"
                tickets_list += f"   üë§ {user_name} | üìÖ {created_date}\n"
                tickets_list += f"   üìù {ticket['subject'][:50]}...\n\n"
            
            message_text = f"<b>{title}</b>\n\n{tickets_list}"
            user_role = await db.get_user_role(callback.from_user.id)
            keyboard = get_admin_tickets_keyboard(tickets, ticket_type, user_role)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            ERROR_MESSAGE,
            reply_markup=get_admin_panel(),
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("admin_ticket_"))
async def show_admin_ticket_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        ticket_id = int(callback.data.split("_")[-1])
        ticket = await db.get_ticket(ticket_id)
        
        if not ticket:
            await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await db.get_user(ticket['user_id'])
        user_name = user['first_name'] if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await db.get_ticket_messages(ticket_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        messages_info = ""
        if messages:
            messages_info = f"\n<b>üí¨ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:</b>\n"
            for msg in messages[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                sender = "üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if msg['is_admin'] else f"üë§ {msg.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
                msg_date = datetime.fromisoformat(msg['created_at']).strftime("%d.%m %H:%M")
                messages_info += f"‚Ä¢ {sender} ({msg_date}):\n  {msg['message'][:150]}...\n\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        created_at = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m.%Y %H:%M")
        updated_at = datetime.fromisoformat(ticket['updated_at']).strftime("%d.%m.%Y %H:%M")
        
        status_emoji = get_status_emoji(ticket['status'])
        priority_emoji = get_priority_emoji(ticket.get('priority', 'medium'))
        category_name = TICKET_CATEGORIES.get(ticket['category'], ticket['category'])
        status_name = TICKET_STATUSES.get(ticket['status'], ticket['status'])
        
        details_text = f"""
üé´ <b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}</b> {priority_emoji}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name} (ID: {ticket['user_id']})
üìã <b>–¢–µ–º–∞:</b> {ticket['subject']}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}
‚è∞ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at}
üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_at}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{ticket['description']}

{messages_info}
"""
        
        user_role = await db.get_user_role(callback.from_user.id)
        await callback.message.edit_text(
            details_text,
            reply_markup=get_admin_ticket_actions(
                ticket_id, 
                ticket['status'], 
                ticket.get('assigned_admin'),
                callback.from_user.id,
                user_role=user_role
            ),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("admin_respond_"))
async def start_admin_response(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    ticket_id = int(callback.data.split("_")[-1])
    
    await state.update_data(admin_responding_ticket_id=ticket_id)
    await callback.message.edit_text(
        TICKET_RESPONSE_MESSAGE.format(ticket_id=ticket_id),
        reply_markup=get_admin_quick_responses(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("quick_"))
async def quick_response(callback: CallbackQuery, state: FSMContext):
    """–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    data = await state.get_data()
    ticket_id = data.get('admin_responding_ticket_id')
    
    if not ticket_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ", show_alert=True)
        return
    
    quick_type = callback.data.split("_", 1)[1]
    
    # –°–ª–æ–≤–∞—Ä—å –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    quick_responses = {
        "resolved": "‚úÖ –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
        "in_progress": "‚è≥ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        "need_info": "‚ùì –î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        "forwarded": "üìã –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
        "dev_issue": "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏. –ù–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º."
    }
    
    response_text = quick_responses.get(quick_type, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    
    await send_admin_response(callback, state, ticket_id, response_text, quick_type)


@router.callback_query(F.data == "admin_custom_response")
async def custom_response(callback: CallbackQuery, state: FSMContext):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_response)
    await callback.answer()


@router.message(AdminStates.waiting_response)
async def process_admin_response(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
    if not await check_agent_or_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED)
        return
    
    data = await state.get_data()
    ticket_id = data.get('admin_responding_ticket_id')
    
    if not ticket_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ", reply_markup=get_admin_panel())
        await state.clear()
        return
    
    response_text = message.text.strip()
    
    if len(response_text) < 5:
        await message.answer(
            "‚ùå –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await send_admin_response_message(message, state, ticket_id, response_text)


async def send_admin_response(callback: CallbackQuery, state: FSMContext, ticket_id: int, response_text: str, action_type: str = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑ callback)"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        await db.add_ticket_message(ticket_id, callback.from_user.id, response_text, True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if action_type == "resolved":
            await db.update_ticket_status(ticket_id, 'resolved', callback.from_user.id)
        elif action_type == "in_progress":
            await db.update_ticket_status(ticket_id, 'in_progress', callback.from_user.id)
        else:
            await db.update_ticket_status(ticket_id, 'in_progress', callback.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        ticket = await db.get_ticket(ticket_id)
        if ticket:
            await notify_user_response(ticket['user_id'], ticket_id, response_text)
        
        await state.clear()
        
        await callback.message.edit_text(
            f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
            f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=get_admin_panel(),
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        await callback.message.edit_text(
            ERROR_MESSAGE,
            reply_markup=get_admin_panel(),
            parse_mode="HTML"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)


async def send_admin_response_message(message: Message, state: FSMContext, ticket_id: int, response_text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è)"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        await db.add_ticket_message(ticket_id, message.from_user.id, response_text, True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_ticket_status(ticket_id, 'in_progress', message.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        ticket = await db.get_ticket(ticket_id)
        if ticket:
            await notify_user_response(ticket['user_id'], ticket_id, response_text)
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
            f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=get_admin_panel(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_admin_panel(),
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("admin_status_"))
async def change_ticket_status(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        parts = callback.data.split("_")
        ticket_id = int(parts[2])
        new_status = parts[3]
        
        await db.update_ticket_status(ticket_id, new_status, callback.from_user.id)
        
        status_name = TICKET_STATUSES.get(new_status, new_status)
        
        await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        await show_admin_ticket_details(callback)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        ticket = await db.get_ticket(ticket_id)
        if ticket:
            await notify_user_status_change(ticket['user_id'], ticket_id, new_status)
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin_priority_"))
async def change_ticket_priority(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        parts = callback.data.split("_")
        ticket_id = int(parts[2])
        priority = parts[3]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        await db.update_ticket_priority(ticket_id, priority)
        
        priority_names = {'high': '–í—ã—Å–æ–∫–∏–π', 'medium': '–°—Ä–µ–¥–Ω–∏–π', 'low': '–ù–∏–∑–∫–∏–π'}
        priority_name = priority_names.get(priority, priority)
        
        await callback.answer(f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {priority_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        await show_admin_ticket_details(callback)
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", show_alert=True)


@router.callback_query(F.data.startswith("search_ticket_"))
async def quick_search_ticket(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏ –ø–æ–∫–∞–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ ID –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        ticket_id = int(callback.data.split("_")[-1])
        ticket = await db.get_ticket(ticket_id)
        
        if not ticket:
            await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∫–∞–∑—É –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –ª—é–±–æ–≥–æ –∏–∑ —Ä–æ–ª–µ–π
        await show_admin_ticket_details(callback)
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
    if not await check_agent_or_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        stats = await db.get_ticket_stats()
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

<b>üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {stats.get('total', 0)}

<b>üìã –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>
‚Ä¢ üÜï –ù–æ–≤—ã–µ: {stats.get('status_new', 0)}
‚Ä¢ ‚è≥ –í —Ä–∞–±–æ—Ç–µ: {stats.get('status_in_progress', 0)}
‚Ä¢ ‚è∞ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {stats.get('status_waiting_response', 0)}
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ: {stats.get('status_resolved', 0)}
‚Ä¢ üîí –ó–∞–∫—Ä—ã—Ç—ã–µ: {stats.get('status_closed', 0)}

<b>‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {stats.get('status_new', 0) + stats.get('status_waiting_response', 0)}
"""
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_admin_stats_keyboard(stats),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            ERROR_MESSAGE,
            reply_markup=get_admin_panel(),
            parse_mode="HTML"
        )
        await callback.answer()


async def notify_user_response(user_id: int, ticket_id: int, response_text: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–≤–µ—Ç–µ"""
    from bot import bot
    
    try:
        await bot.send_message(
            user_id,
            f"üí¨ <b>–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}</b>\n\n"
            f"<b>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n{response_text}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–µ—Ä–µ–π–¥—è –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\".",
            parse_mode="HTML"
        )
    except:
        pass


async def notify_user_status_change(user_id: int, ticket_id: int, new_status: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    from bot import bot
    
    try:
        status_name = TICKET_STATUSES.get(new_status, new_status)
        status_emoji = get_status_emoji(new_status)
        
        await bot.send_message(
            user_id,
            f"üìä <b>–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è #{ticket_id} –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_emoji} {status_name}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\".",
            parse_mode="HTML"
        )
    except:
        pass


def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    emojis = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'waiting_response': '‚è∞',
        'resolved': '‚úÖ',
        'closed': 'üîí'
    }
    return emojis.get(status, '‚ùì')


def get_priority_emoji(priority: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    emojis = {
        'high': 'üî¥',
        'medium': 'üü°',
        'low': 'üü¢'
    }
    return emojis.get(priority, 'üü°')