"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

import math
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from keyboards.user import (
    get_main_menu, get_ticket_categories, get_cancel_keyboard,
    get_my_tickets_keyboard, get_ticket_details_keyboard,
    get_faq_keyboard, get_faq_item_keyboard, get_ticket_created_keyboard
)
from keyboards.reply import (
    get_client_main_keyboard, get_ticket_categories_keyboard,
    get_cancel_keyboard as get_reply_cancel_keyboard
)
from database import db
from utils.texts import (
    NEW_TICKET_MESSAGE, TICKET_CATEGORIES, TICKET_SUBJECT_MESSAGE,
    TICKET_DESCRIPTION_MESSAGE, TICKET_CREATED_MESSAGE, MY_TICKETS_MESSAGE,
    NO_TICKETS_MESSAGE, TICKET_DETAILS_MESSAGE, TICKET_STATUSES,
    FAQ_MESSAGE, FAQ_ITEMS, PLEASE_WAIT, ERROR_MESSAGE, TICKET_NOT_FOUND,
    CONTACTS_MESSAGE, CANCEL_MESSAGE
)
from handlers.common import TicketStates
from config import MAX_TICKET_TEXT_LENGTH, TICKETS_PER_PAGE


router = Router()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò REPLY –ö–ù–û–ü–û–ö –ö–õ–ò–ï–ù–¢–ê =====

@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", StateFilter(None))
async def handle_new_ticket_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    await start_new_ticket_process(message, state)


@router.message(F.text == "üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", StateFilter(None))
async def handle_my_tickets_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π"""
    await show_user_tickets_process(message, 0)


@router.message(F.text == "‚ùì FAQ", StateFilter(None))
async def handle_faq_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ FAQ"""
    user_role = await db.get_user_role(message.from_user.id)
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_role == 'admin':
        from keyboards.reply import get_admin_main_keyboard
        keyboard = get_admin_main_keyboard()
    elif user_role == 'agent':
        from keyboards.reply import get_agent_main_keyboard
        keyboard = get_agent_main_keyboard(show_admin_return=False)
    else:
        from keyboards.reply import get_client_keyboard_for_user
        keyboard = await get_client_keyboard_for_user(message.from_user.id)
    
    await message.answer(
        FAQ_MESSAGE,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    from keyboards.user import get_faq_keyboard
    await message.answer(
        "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:</b>",
        reply_markup=get_faq_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", StateFilter(None))
async def handle_contacts_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    user_role = await db.get_user_role(message.from_user.id)
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_role == 'admin':
        from keyboards.reply import get_admin_main_keyboard
        keyboard = get_admin_main_keyboard()
    elif user_role == 'agent':
        from keyboards.reply import get_agent_main_keyboard
        keyboard = get_agent_main_keyboard(show_admin_return=(user_role == 'admin'))
    else:
        from keyboards.reply import get_client_keyboard_for_user
        keyboard = await get_client_keyboard_for_user(message.from_user.id)
    
    await message.answer(
        CONTACTS_MESSAGE,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

async def start_new_ticket_process(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    await message.answer(
        NEW_TICKET_MESSAGE,
        reply_markup=get_ticket_categories_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(TicketStates.waiting_category)


async def show_user_tickets_process(message: Message, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        tickets = await db.get_user_tickets(
            message.from_user.id, 
            limit=TICKETS_PER_PAGE, 
            offset=page * TICKETS_PER_PAGE
        )
        
        if not tickets and page == 0:
            await message.answer(
                NO_TICKETS_MESSAGE + "\n\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è.</i>",
                reply_markup=get_client_main_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_tickets = len(await db.get_user_tickets(message.from_user.id, limit=1000))
        total_pages = math.ceil(total_tickets / TICKETS_PER_PAGE)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
        tickets_list = ""
        for i, ticket in enumerate(tickets, 1):
            status_emoji = "üÜï" if ticket['status'] == 'new' else "‚è≥" if ticket['status'] == 'in_progress' else "‚úÖ"
            created_date = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m.%Y")
            tickets_list += f"{i + page * TICKETS_PER_PAGE}. {status_emoji} <b>#{ticket['id']}</b> - {ticket['subject'][:40]}...\n"
            tickets_list += f"   üìÖ {created_date} | {TICKET_STATUSES.get(ticket['status'], ticket['status'])}\n\n"
        
        message_text = MY_TICKETS_MESSAGE.format(tickets_list=tickets_list)
        
        await message.answer(
            message_text,
            reply_markup=get_client_main_keyboard(),
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
        await message.answer(
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>",
            reply_markup=get_my_tickets_keyboard(tickets, page, total_pages),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_client_main_keyboard(),
            parse_mode="HTML"
        )


@router.callback_query(F.data == "new_ticket")
async def start_new_ticket(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        NEW_TICKET_MESSAGE,
        reply_markup=get_ticket_categories(),
        parse_mode="HTML"
    )
    await state.set_state(TicketStates.waiting_category)
    await callback.answer()


@router.callback_query(F.data.startswith("category_"), TicketStates.waiting_category)
async def select_category(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    category = callback.data.split("_", 1)[1]
    
    if category not in TICKET_CATEGORIES:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", show_alert=True)
        return
    
    await state.update_data(category=category)
    
    await callback.message.edit_text(
        TICKET_SUBJECT_MESSAGE,
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(TicketStates.waiting_subject)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Reply –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.message(F.text.in_(["üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "üí≥ –û–ø–ª–∞—Ç–∞", "üë§ –ê–∫–∫–∞—É–Ω—Ç", "üí¨ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã", "üò° –ñ–∞–ª–æ–±–∞", "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"]), TicketStates.waiting_category)
async def select_category_reply(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ Reply –∫–Ω–æ–ø–∫—É"""
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_mapping = {
        "üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞": "technical",
        "üí≥ –û–ø–ª–∞—Ç–∞": "billing",
        "üë§ –ê–∫–∫–∞—É–Ω—Ç": "account",
        "üí¨ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã": "general",
        "üò° –ñ–∞–ª–æ–±–∞": "complaint",
        "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "suggestion"
    }
    
    category = category_mapping.get(message.text)
    if not category:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=get_ticket_categories_keyboard()
        )
        return
    
    await state.update_data(category=category)
    
    await message.answer(
        TICKET_SUBJECT_MESSAGE,
        reply_markup=get_reply_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(TicketStates.waiting_subject)


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", TicketStates.waiting_category)
async def cancel_category_selection(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.clear()
    
    user_role = await db.get_user_role(message.from_user.id)
    keyboard = get_client_main_keyboard() if user_role == 'client' else None
    
    await message.answer(
        CANCEL_MESSAGE,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(TicketStates.waiting_subject)
async def input_subject(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user_role = await db.get_user_role(message.from_user.id)
        keyboard = get_client_main_keyboard() if user_role == 'client' else None
        await message.answer(
            CANCEL_MESSAGE,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    subject = message.text.strip()
    
    if len(subject) < 5:
        await message.answer(
            "‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_reply_cancel_keyboard()
        )
        return
    
    if len(subject) > 100:
        await message.answer(
            "‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_reply_cancel_keyboard()
        )
        return
    
    await state.update_data(subject=subject)
    
    await message.answer(
        TICKET_DESCRIPTION_MESSAGE,
        reply_markup=get_reply_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(TicketStates.waiting_description)


@router.message(TicketStates.waiting_description)
async def input_description(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        user_role = await db.get_user_role(message.from_user.id)
        keyboard = get_client_main_keyboard() if user_role == 'client' else None
        await message.answer(
            CANCEL_MESSAGE,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    description = message.text.strip()
    
    if len(description) < 10:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_reply_cancel_keyboard()
        )
        return
    
    if len(description) > MAX_TICKET_TEXT_LENGTH:
        await message.answer(
            f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_TICKET_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_reply_cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    category = data.get('category')
    subject = data.get('subject')
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket_id = await db.create_ticket(
            user_id=message.from_user.id,
            category=category,
            subject=subject,
            description=description
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        category_name = TICKET_CATEGORIES.get(category, category)
        success_message = TICKET_CREATED_MESSAGE.format(
            ticket_id=ticket_id,
            category=category_name,
            subject=subject
        )
        
        user_role = await db.get_user_role(message.from_user.id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_role == 'admin':
            from keyboards.reply import get_admin_main_keyboard
            keyboard = get_admin_main_keyboard()
        elif user_role == 'agent':
            from keyboards.reply import get_agent_main_keyboard
            keyboard = get_agent_main_keyboard()
        else:
            keyboard = get_client_main_keyboard()
        
        await message.answer(
            success_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
        await message.answer(
            "üéØ <b>–î–µ–π—Å—Ç–≤–∏—è —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º:</b>",
            reply_markup=get_ticket_created_keyboard(ticket_id),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏ –∞–≥–µ–Ω—Ç–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        await notify_support_new_ticket(ticket_id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
    except Exception as e:
        user_role = await db.get_user_role(message.from_user.id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_role == 'admin':
            from keyboards.reply import get_admin_main_keyboard
            keyboard = get_admin_main_keyboard()
        elif user_role == 'agent':
            from keyboards.reply import get_agent_main_keyboard
            keyboard = get_agent_main_keyboard()
        else:
            keyboard = get_client_main_keyboard()
            
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.clear()


@router.callback_query(F.data == "my_tickets")
async def show_my_tickets(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await show_user_tickets_page(callback, 0)


@router.callback_query(F.data.startswith("tickets_page_"))
async def show_tickets_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—Ä–∞—â–µ–Ω–∏–π"""
    page = int(callback.data.split("_")[-1])
    await show_user_tickets_page(callback, page)


async def show_user_tickets_page(callback: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        tickets = await db.get_user_tickets(
            callback.from_user.id, 
            limit=TICKETS_PER_PAGE, 
            offset=page * TICKETS_PER_PAGE
        )
        
        if not tickets and page == 0:
            await callback.message.edit_text(
                NO_TICKETS_MESSAGE,
                reply_markup=get_main_menu(),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_tickets = len(await db.get_user_tickets(callback.from_user.id, limit=1000))
        total_pages = math.ceil(total_tickets / TICKETS_PER_PAGE)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
        tickets_list = ""
        for i, ticket in enumerate(tickets, 1):
            status_emoji = "üÜï" if ticket['status'] == 'new' else "‚è≥" if ticket['status'] == 'in_progress' else "‚úÖ"
            created_date = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m.%Y")
            tickets_list += f"{i + page * TICKETS_PER_PAGE}. {status_emoji} <b>#{ticket['id']}</b> - {ticket['subject'][:40]}...\n"
            tickets_list += f"   üìÖ {created_date} | {TICKET_STATUSES.get(ticket['status'], ticket['status'])}\n\n"
        
        message_text = MY_TICKETS_MESSAGE.format(tickets_list=tickets_list)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_my_tickets_keyboard(tickets, page, total_pages),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            ERROR_MESSAGE,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("ticket_"))
async def show_ticket_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    try:
        ticket_id = int(callback.data.split("_")[1])
        ticket = await db.get_ticket(ticket_id)
        
        if not ticket or ticket['user_id'] != callback.from_user.id:
            await callback.answer(TICKET_NOT_FOUND, show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
        messages = await db.get_ticket_messages(ticket_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        messages_info = ""
        if messages:
            messages_info = f"\n<b>üí¨ –°–æ–æ–±—â–µ–Ω–∏—è ({len(messages)}):</b>\n"
            for msg in messages[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                sender = "üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞" if msg['is_admin'] else "üë§ –í—ã"
                msg_date = datetime.fromisoformat(msg['created_at']).strftime("%d.%m %H:%M")
                messages_info += f"‚Ä¢ {sender} ({msg_date}): {msg['message'][:100]}...\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        created_at = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m.%Y %H:%M")
        updated_at = datetime.fromisoformat(ticket['updated_at']).strftime("%d.%m.%Y %H:%M")
        
        status_emoji = "üÜï" if ticket['status'] == 'new' else "‚è≥" if ticket['status'] == 'in_progress' else "‚úÖ"
        category_name = TICKET_CATEGORIES.get(ticket['category'], ticket['category'])
        status_name = TICKET_STATUSES.get(ticket['status'], ticket['status'])
        
        details_text = TICKET_DETAILS_MESSAGE.format(
            ticket_id=ticket_id,
            subject=ticket['subject'],
            category=category_name,
            status_emoji=status_emoji,
            status=status_name,
            created_at=created_at,
            updated_at=updated_at,
            description=ticket['description'],
            messages_info=messages_info
        )
        
        user_can_respond = ticket['status'] in ['new', 'in_progress', 'waiting_response']
        
        await callback.message.edit_text(
            details_text,
            reply_markup=get_ticket_details_keyboard(ticket_id, ticket['status'], user_can_respond),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("respond_ticket_"))
async def start_ticket_response(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    ticket_id = int(callback.data.split("_")[-1])
    
    await state.update_data(responding_ticket_id=ticket_id)
    await state.set_state(TicketStates.waiting_response)
    
    await callback.message.edit_text(
        f"üí¨ <b>–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket_id}</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(TicketStates.waiting_response)
async def add_ticket_response(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é"""
    data = await state.get_data()
    ticket_id = data.get('responding_ticket_id')
    
    if not ticket_id:
        await state.clear()
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ", reply_markup=get_main_menu())
        return
    
    response_text = message.text.strip()
    
    if len(response_text) < 5:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(response_text) > MAX_TICKET_TEXT_LENGTH:
        await message.answer(
            f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º {MAX_TICKET_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await db.add_ticket_message(ticket_id, message.from_user.id, response_text, False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è
        ticket = await db.get_ticket(ticket_id)
        if ticket:
            # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –Ω–æ–≤–æ–µ, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if ticket['status'] in ['in_progress', 'new']:
                await db.update_ticket_status(ticket_id, 'waiting_response')
            # –ï—Å–ª–∏ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º
            elif ticket['status'] in ['resolved', 'closed']:
                await db.update_ticket_status(ticket_id, 'waiting_response')
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é #{ticket_id}</b>\n\n"
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_ticket_details_keyboard(ticket_id, ticket['status'] if ticket else 'new'),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await notify_support_ticket_update(ticket_id, message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await state.clear()


@router.callback_query(F.data.startswith("close_ticket_"))
async def close_ticket(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    ticket_id = int(callback.data.split("_")[-1])
    
    try:
        ticket = await db.get_ticket(ticket_id)
        
        if not ticket or ticket['user_id'] != callback.from_user.id:
            await callback.answer(TICKET_NOT_FOUND, show_alert=True)
            return
        
        if ticket['status'] != 'resolved':
            await callback.answer("‚ùå –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)
            return
        
        await db.update_ticket_status(ticket_id, 'closed')
        
        await callback.message.edit_text(
            f"‚úÖ <b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–æ</b>\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å.",
            reply_markup=get_my_tickets_keyboard([], 0, 1),  # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ!")
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "faq")
async def show_faq(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
    await callback.message.edit_text(
        FAQ_MESSAGE,
        reply_markup=get_faq_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "show_my_tickets_inline")
async def show_my_tickets_inline(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ inline"""
    try:
        tickets = await db.get_user_tickets(
            callback.from_user.id, 
            limit=TICKETS_PER_PAGE, 
            offset=0
        )
        
        if not tickets:
            await callback.message.edit_text(
                NO_TICKETS_MESSAGE,
                reply_markup=get_main_menu(),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_tickets = len(await db.get_user_tickets(callback.from_user.id, limit=1000))
        total_pages = math.ceil(total_tickets / TICKETS_PER_PAGE)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
        tickets_list = ""
        for i, ticket in enumerate(tickets, 1):
            status_emoji = "üÜï" if ticket['status'] == 'new' else "‚è≥" if ticket['status'] == 'in_progress' else "‚úÖ"
            created_date = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m.%Y")
            tickets_list += f"{i}. {status_emoji} <b>#{ticket['id']}</b> - {ticket['subject'][:40]}...\n"
            tickets_list += f"   üìÖ {created_date} | {TICKET_STATUSES.get(ticket['status'], ticket['status'])}\n\n"
        
        message_text = MY_TICKETS_MESSAGE.format(tickets_list=tickets_list)
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_my_tickets_keyboard(tickets, 0, total_pages),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.message.edit_text(
            ERROR_MESSAGE,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("faq_"))
async def show_faq_item(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç FAQ"""
    faq_id = callback.data.split("_", 1)[1]
    
    if faq_id not in FAQ_ITEMS:
        await callback.answer("‚ùå FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    faq_item = FAQ_ITEMS[faq_id]
    
    await callback.message.edit_text(
        faq_item['answer'],
        reply_markup=get_faq_item_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


async def notify_support_new_ticket(ticket_id: int, user_name: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ –Ω–æ–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
    from config import ADMINS, AGENTS
    from bot import bot
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏
    ticket = await db.get_ticket(ticket_id)
    if not ticket:
        return
    
    category_name = TICKET_CATEGORIES.get(ticket['category'], ticket['category'])
    
    notification_text = f"""
üÜï <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id}</b>

üë§ <b>–û—Ç:</b> {user_name}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}
üìù <b>–¢–µ–º–∞:</b> {ticket['subject'][:50]}...
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    from keyboards.admin import get_quick_ticket_actions
    quick_actions = get_quick_ticket_actions(ticket_id, "new_ticket")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                notification_text + "\n<i>üëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</i>",
                reply_markup=quick_actions,
                parse_mode="HTML"
            )
        except:
            continue
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    for agent_id in AGENTS:
        try:
            await bot.send_message(
                agent_id,
                notification_text + "\n<i>üëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</i>",
                reply_markup=quick_actions,
                parse_mode="HTML"
            )
        except:
            continue


async def notify_support_ticket_update(ticket_id: int, user_name: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    from config import ADMINS, AGENTS
    from bot import bot
    from keyboards.admin import get_quick_ticket_actions
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è
    ticket = await db.get_ticket(ticket_id)
    if not ticket:
        return
    
    notification_text = f"""
üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏ #{ticket_id}</b>

üë§ <b>–û—Ç:</b> {user_name}
üìù <b>–¢–µ–º–∞:</b> {ticket['subject'][:40]}...
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {TICKET_STATUSES.get(ticket['status'], ticket['status'])}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

–¢—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞.
"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    quick_actions = get_quick_ticket_actions(ticket_id, "notification")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                notification_text + "\n<i>üëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</i>",
                reply_markup=quick_actions,
                parse_mode="HTML"
            )
        except:
            continue
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    for agent_id in AGENTS:
        try:
            await bot.send_message(
                agent_id,
                notification_text + "\n<i>üëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</i>",
                reply_markup=quick_actions,
                parse_mode="HTML"
            )
        except:
            continue