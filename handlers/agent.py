"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""

import math
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from keyboards.user import get_main_menu
from keyboards.admin import get_admin_ticket_actions
from keyboards.reply import (
    get_agent_main_keyboard, get_agent_actions_keyboard, 
    get_quick_responses_keyboard, get_cancel_keyboard,
    get_client_main_keyboard
)
from database import db
from utils.texts import (
    TICKET_DETAILS_MESSAGE, TICKET_CATEGORIES, TICKET_STATUSES,
    ERROR_MESSAGE, PERMISSION_DENIED, TICKET_RESPONSE_MESSAGE
)
from handlers.common import AdminStates
from config import TICKETS_PER_PAGE


router = Router()


async def check_agent_or_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–≥–µ–Ω—Ç–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_role = await db.get_user_role(user_id)
    return user_role in ['agent', 'admin']


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò REPLY –ö–ù–û–ü–û–ö –ê–ì–ï–ù–¢–ê =====

@router.message(F.text.in_(["üÜï –ù–æ–≤—ã–µ", "‚è≥ –í —Ä–∞–±–æ—Ç–µ", "‚è∞ –û–∂–∏–¥–∞—é—Ç"]), StateFilter(None))
async def handle_agent_tickets_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–º"""
    if not await check_agent_or_admin(message.from_user.id):
        await message.answer(
            PERMISSION_DENIED,
            reply_markup=get_client_main_keyboard()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –∫–Ω–æ–ø–∫–µ
    if message.text == "üÜï –ù–æ–≤—ã–µ":
        status_filter = ['new']
        title = "üÜï –ù–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"
    elif message.text == "‚è≥ –í —Ä–∞–±–æ—Ç–µ":
        status_filter = ['in_progress']
        title = "‚è≥ –û–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ"
    else:  # "‚è∞ –û–∂–∏–¥–∞—é—Ç"
        status_filter = ['waiting_response']
        title = "‚è∞ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞"
    
    await show_agent_tickets(message, status_filter, title)


@router.message(F.text == "üîç –ü–æ–∏—Å–∫", StateFilter(None))
async def handle_agent_search_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–º"""
    if not await check_agent_or_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_client_main_keyboard())
        return
    
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_search)


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", StateFilter(None))
async def handle_agent_stats_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
    if not await check_agent_or_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_client_main_keyboard())
        return
    
    await show_agent_stats(message)


# ===== –§–£–ù–ö–¶–ò–ò –ü–û–ö–ê–ó–ê –î–ê–ù–ù–´–• =====

async def show_agent_tickets(message: Message, status_filter: list, title: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        all_tickets = await db.get_pending_tickets(50)
        tickets = [t for t in all_tickets if t['status'] in status_filter]
        
        if not tickets:
            await message.answer(
                f"<b>{title}</b>\n\nüì≠ –û–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_agent_main_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
        tickets_list = ""
        for i, ticket in enumerate(tickets[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status_emoji = get_status_emoji(ticket['status'])
            priority_emoji = get_priority_emoji(ticket.get('priority', 'medium'))
            user_name = ticket.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            created_date = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m")
            
            tickets_list += f"{i}. {priority_emoji}{status_emoji} <b>#{ticket['id']}</b>\n"
            tickets_list += f"   üë§ {user_name} | üìÖ {created_date}\n"
            tickets_list += f"   üìù {ticket['subject'][:50]}...\n\n"
        
        message_text = f"<b>{title}</b>\n\n{tickets_list}"
        
        if len(tickets) > 10:
            message_text += f"\n<i>–ò –µ—â–µ {len(tickets) - 10} –æ–±—Ä–∞—â–µ–Ω–∏–π...</i>"
        
        await message.answer(
            message_text,
            reply_markup=get_agent_main_keyboard(),
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
        from keyboards.admin import get_admin_tickets_keyboard
        inline_keyboard = get_admin_tickets_keyboard(tickets[:10], "agent", user_role="agent")
        
        await message.answer(
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>",
            reply_markup=inline_keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_agent_main_keyboard(),
            parse_mode="HTML"
        )


async def show_agent_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.get_ticket_stats()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞
        # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

<b>üìà –¢–µ–∫—É—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>
‚Ä¢ üÜï –ù–æ–≤—ã–µ: {stats.get('status_new', 0)}
‚Ä¢ ‚è≥ –í —Ä–∞–±–æ—Ç–µ: {stats.get('status_in_progress', 0)}
‚Ä¢ ‚è∞ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {stats.get('status_waiting_response', 0)}

<b>üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:</b>
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ: {stats.get('status_resolved', 0)}
‚Ä¢ üîí –ó–∞–∫—Ä—ã—Ç—ã–µ: {stats.get('status_closed', 0)}

<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {stats.get('total', 0)}
‚Ä¢ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {stats.get('status_new', 0) + stats.get('status_waiting_response', 0)}
"""
        
        await message.answer(
            stats_text,
            reply_markup=get_agent_main_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_agent_main_keyboard(),
            parse_mode="HTML"
        )


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE CALLBACK =====
# 
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_ticket_ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ handlers/admin.py 
# –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º–∏ –∏ –∞–≥–µ–Ω—Ç–∞–º–∏


# ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í –ò –î–ï–ô–°–¢–í–ò–ô =====

@router.message(F.text == "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", AdminStates.waiting_response)
async def handle_agent_response_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–æ–º"""
    if not await check_agent_or_admin(message.from_user.id):
        await message.answer(PERMISSION_DENIED, reply_markup=get_client_main_keyboard())
        return
    
    await message.answer(
        "üí¨ <b>–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π:",
        reply_markup=get_quick_responses_keyboard(),
        parse_mode="HTML"
    )


@router.message(AdminStates.waiting_search)
async def process_agent_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_agent_main_keyboard()
        )
        return
    
    try:
        ticket_id = int(message.text.strip())
        ticket = await db.get_ticket(ticket_id)
        
        if not ticket:
            await message.answer(
                f"‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_agent_main_keyboard()
            )
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        await show_ticket_for_agent(message, ticket)
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
            reply_markup=get_cancel_keyboard()
        )


async def show_ticket_for_agent(message: Message, ticket: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await db.get_user(ticket['user_id'])
        user_name = user['first_name'] if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        status_emoji = get_status_emoji(ticket['status'])
        category_name = TICKET_CATEGORIES.get(ticket['category'], ticket['category'])
        status_name = TICKET_STATUSES.get(ticket['status'], ticket['status'])
        
        created_at = datetime.fromisoformat(ticket['created_at']).strftime("%d.%m.%Y %H:%M")
        
        details_text = f"""
üé´ <b>–ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket['id']}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {user_name}
üìã <b>–¢–µ–º–∞:</b> {ticket['subject']}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_name}
‚è∞ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{ticket['description'][:200]}...
"""
        
        await message.answer(
            details_text,
            reply_markup=get_agent_main_keyboard(),
            parse_mode="HTML"
        )
        
        # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        if ticket['status'] in ['new', 'in_progress', 'waiting_response']:
            from keyboards.admin import get_admin_ticket_actions
            await message.answer(
                "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>",
                reply_markup=get_admin_ticket_actions(
                    ticket['id'], 
                    ticket['status'],
                    ticket.get('assigned_admin'),
                    message.from_user.id,
                    user_role='agent'
                ),
                parse_mode="HTML"
            )
        
    except Exception as e:
        await message.answer(
            ERROR_MESSAGE,
            reply_markup=get_agent_main_keyboard()
        )


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    emojis = {
        'new': 'üÜï',
        'in_progress': '‚è≥',
        'waiting_response': '‚è∞',
        'resolved': '‚úÖ',
        'closed': 'üîí'
    }
    return emojis.get(status, '‚ùì')


def get_priority_emoji(priority: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    emojis = {
        'high': 'üî¥',
        'medium': 'üü°',
        'low': 'üü¢'
    }
    return emojis.get(priority, 'üü°')