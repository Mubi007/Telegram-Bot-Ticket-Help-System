"""–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""

import asyncio
import json
import csv
import io
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext

from database import db
from keyboards.admin import (
    get_admin_manage_keyboard, get_admin_settings_keyboard, 
    get_admin_export_keyboard, get_admin_panel
)
from utils.texts import PERMISSION_DENIED

router = Router()

async def check_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_role = await db.get_user_role(user_id)
    return user_role == 'admin'


# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï =====

@router.callback_query(F.data == "admin_manage")
async def show_admin_manage(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_manage_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_list_users")
async def list_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        users = await db.get_all_users(limit=50)
        total_users = await db.count_total_users()
        
        text = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</b> (–ø–æ–∫–∞–∑–∞–Ω–æ {len(users)} –∏–∑ {total_users})\n\n"
        
        for user in users:
            role_emoji = {"admin": "üëë", "agent": "üõ°Ô∏è", "client": "üë§"}.get(user['role'], "‚ùì")
            status = "üü¢" if user['is_active'] else "üî¥"
            text += f"{role_emoji} {status} <b>{user.get('first_name', 'N/A')}</b> (@{user.get('username', 'N/A')})\n"
            text += f"   ID: <code>{user['user_id']}</code> | –†–æ–ª—å: {user['role']}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_manage_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)


@router.callback_query(F.data == "admin_roles_stats")
async def show_roles_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        admin_count = await db.count_users_by_role('admin')
        agent_count = await db.count_users_by_role('agent')
        client_count = await db.count_users_by_role('client')
        total = await db.count_total_users()
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º</b>

üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b> {admin_count}
üõ°Ô∏è <b>–ê–≥–µ–Ω—Ç—ã:</b> {agent_count}
üë§ <b>–ö–ª–∏–µ–Ω—Ç—ã:</b> {client_count}

üìà <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total}
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_admin_manage_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====

@router.callback_query(F.data == "admin_settings")
async def show_admin_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    text = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: 1000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: 5
‚Ä¢ –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 24 —á–∞—Å–∞

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_settings_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_backup")
async def create_backup(callback: CallbackQuery):
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        users = await db.get_all_users(limit=1000)
        tickets = await db.get_all_tickets(limit=1000)
        stats = await db.get_ticket_stats()
        
        backup_data = {
            "created_at": datetime.now().isoformat(),
            "users": users,
            "tickets": tickets,
            "stats": stats,
            "version": "1.0"
        }
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        backup_json = json.dumps(backup_data, ensure_ascii=False, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        file = BufferedInputFile(backup_json.encode('utf-8'), filename=filename)
        
        await callback.message.answer_document(
            file,
            caption=f"üíæ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
                   f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                   f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                   f"üìã –û–±—Ä–∞—â–µ–Ω–∏–π: {len(tickets)}",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", show_alert=True)


# ===== –≠–ö–°–ü–û–†–¢ =====

@router.callback_query(F.data == "admin_export")
async def show_export_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    await callback.message.edit_text(
        "üíæ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=get_admin_export_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_export_stats")
async def export_stats(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        stats = await db.get_ticket_stats()
        admin_count = await db.count_users_by_role('admin')
        agent_count = await db.count_users_by_role('agent')
        client_count = await db.count_users_by_role('client')
        
        csv_data = io.StringIO()
        writer = csv.writer(csv_data)
        
        writer.writerow(['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
        writer.writerow(['–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π', stats.get('total', 0)])
        writer.writerow(['–ù–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π', stats.get('status_new', 0)])
        writer.writerow(['–í —Ä–∞–±–æ—Ç–µ', stats.get('status_in_progress', 0)])
        writer.writerow(['–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞', stats.get('status_waiting_response', 0)])
        writer.writerow(['–†–µ—à–µ–Ω–æ', stats.get('status_resolved', 0)])
        writer.writerow(['–ó–∞–∫—Ä—ã—Ç–æ', stats.get('status_closed', 0)])
        writer.writerow(['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤', admin_count])
        writer.writerow(['–ê–≥–µ–Ω—Ç–æ–≤', agent_count])
        writer.writerow(['–ö–ª–∏–µ–Ω—Ç–æ–≤', client_count])
        
        filename = f"statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        file = BufferedInputFile(csv_data.getvalue().encode('utf-8'), filename=filename)
        
        await callback.message.answer_document(
            file,
            caption="üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞</b>",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "admin_export_tickets")
async def export_tickets(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ CSV"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        tickets = await db.get_all_tickets(limit=1000)
        
        csv_data = io.StringIO()
        writer = csv.writer(csv_data)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            'ID', 'User ID', 'Username', 'Category', 'Subject', 
            'Status', 'Priority', 'Created', 'Updated'
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for ticket in tickets:
            writer.writerow([
                ticket.get('id', ''),
                ticket.get('user_id', ''),
                ticket.get('username', ''),
                ticket.get('category', ''),
                ticket.get('subject', ''),
                ticket.get('status', ''),
                ticket.get('priority', ''),
                ticket.get('created_at', ''),
                ticket.get('updated_at', '')
            ])
        
        filename = f"tickets_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        file = BufferedInputFile(csv_data.getvalue().encode('utf-8'), filename=filename)
        
        await callback.message.answer_document(
            file,
            caption=f"üìã <b>–û–±—Ä–∞—â–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n–í—Å–µ–≥–æ: {len(tickets)} –æ–±—Ä–∞—â–µ–Ω–∏–π",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data == "admin_export_users")
async def export_users(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        users = await db.get_all_users(limit=1000)
        
        csv_data = io.StringIO()
        writer = csv.writer(csv_data)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            'User ID', 'Username', 'First Name', 'Last Name', 
            'Role', 'Active', 'Created'
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for user in users:
            writer.writerow([
                user.get('user_id', ''),
                user.get('username', ''),
                user.get('first_name', ''),
                user.get('last_name', ''),
                user.get('role', ''),
                '–î–∞' if user.get('is_active') else '–ù–µ—Ç',
                user.get('created_at', '')
            ])
        
        filename = f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        file = BufferedInputFile(csv_data.getvalue().encode('utf-8'), filename=filename)
        
        await callback.message.answer_document(
            file,
            caption=f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n–í—Å–µ–≥–æ: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)


@router.callback_query(F.data == "admin_export_report")
async def export_detailed_report(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        stats = await db.get_ticket_stats()
        users = await db.get_all_users()
        
        report = f"""
–û–¢–ß–Å–¢ –ü–û –†–ê–ë–û–¢–ï –°–õ–£–ñ–ë–´ –ü–û–î–î–ï–†–ñ–ö–ò
–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}
–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}

=== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {stats.get('total', 0)}
–ù–æ–≤—ã—Ö: {stats.get('status_new', 0)}
–í —Ä–∞–±–æ—Ç–µ: {stats.get('status_in_progress', 0)}
–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: {stats.get('status_waiting_response', 0)}
–†–µ—à–µ–Ω–æ: {stats.get('status_resolved', 0)}
–ó–∞–∫—Ä—ã—Ç–æ: {stats.get('status_closed', 0)}

=== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len([u for u in users if u['role'] == 'admin'])}
–ê–≥–µ–Ω—Ç—ã: {len([u for u in users if u['role'] == 'agent'])}
–ö–ª–∏–µ–Ω—Ç—ã: {len([u for u in users if u['role'] == 'client'])}

=== –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ ===
–†–µ—à–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {stats.get('status_resolved', 0)}
–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö: {round(stats.get('status_resolved', 0) / max(stats.get('total', 1), 1) * 100, 1)}%
"""
        
        filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        file = BufferedInputFile(report.encode('utf-8'), filename=filename)
        
        await callback.message.answer_document(
            file,
            caption="üìà <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω</b>",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞", show_alert=True)


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

@router.callback_query(F.data == "admin_change_role")
async def change_user_role(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not await check_admin(callback.from_user.id):
        await callback.answer(PERMISSION_DENIED, show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîß <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:",
        parse_mode="HTML"
    )
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å FSM state –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ ID
    await callback.answer()