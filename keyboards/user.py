"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Any
from utils.texts import TICKET_CATEGORIES, TICKET_STATUSES, FAQ_ITEMS


def get_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="new_ticket")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets"),
        InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
    )
    
    return keyboard.as_markup()


def get_ticket_categories() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    
    for category_id, category_name in TICKET_CATEGORIES.items():
        keyboard.row(
            InlineKeyboardButton(
                text=category_name, 
                callback_data=f"category_{category_id}"
            )
        )
    
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    
    return keyboard.as_markup()


def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return keyboard.as_markup()


def get_my_tickets_keyboard(tickets: List[Dict[str, Any]], page: int = 0, 
                           total_pages: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π
    for ticket in tickets:
        status_emoji = "üÜï" if ticket['status'] == 'new' else "‚è≥" if ticket['status'] == 'in_progress' else "‚úÖ"
        button_text = f"{status_emoji} #{ticket['id']} - {ticket['subject'][:30]}..."
        keyboard.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"ticket_{ticket['id']}"
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tickets_page_{page-1}")
            )
        if page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"tickets_page_{page+1}")
            )
        if nav_buttons:
            keyboard.row(*nav_buttons)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.row(
        InlineKeyboardButton(text="üìù –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="new_ticket")
    )
    keyboard.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return keyboard.as_markup()


def get_ticket_details_keyboard(ticket_id: int, status: str, 
                               user_can_respond: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏ (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç)
    if user_can_respond and status in ['new', 'in_progress', 'waiting_response']:
        keyboard.row(
            InlineKeyboardButton(
                text="üí¨ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                callback_data=f"respond_ticket_{ticket_id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è (–µ—Å–ª–∏ —Ä–µ—à–µ–Ω–æ)
    if status == 'resolved':
        keyboard.row(
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", 
                callback_data=f"close_ticket_{ticket_id}"
            )
        )
    
    keyboard.row(
        InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return keyboard.as_markup()


def get_faq_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ FAQ"""
    keyboard = InlineKeyboardBuilder()
    
    for faq_id, faq_data in FAQ_ITEMS.items():
        keyboard.row(
            InlineKeyboardButton(
                text=faq_data['question'],
                callback_data=f"faq_{faq_id}"
            )
        )
    
    keyboard.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return keyboard.as_markup()


def get_faq_item_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ FAQ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="‚ùì –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq"),
        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="new_ticket")
    )
    keyboard.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return keyboard.as_markup()


def get_contacts_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="new_ticket")
    )
    keyboard.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return keyboard.as_markup()


def get_ticket_created_keyboard(ticket_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(
            text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", 
            callback_data=f"ticket_{ticket_id}"
        )
    )
    keyboard.row(
        InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_tickets"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return keyboard.as_markup()


def get_priority_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.row(
        InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="priority_high"),
        InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium")
    )
    keyboard.row(
        InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π", callback_data="priority_low")
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    
    return keyboard.as_markup()


def get_confirmation_keyboard(action: str, item_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = InlineKeyboardBuilder()
    
    confirm_data = f"confirm_{action}"
    cancel_data = "cancel"
    
    if item_id:
        confirm_data += f"_{item_id}"
    
    keyboard.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=confirm_data),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=cancel_data)
    )
    
    return keyboard.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
def get_quick_reply_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"),
                KeyboardButton(text="‚ùì FAQ")
            ],
            [
                KeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è"),
                KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard


def get_remove_keyboard() -> ReplyKeyboardMarkup:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    return ReplyKeyboardMarkup(keyboard=[[]], resize_keyboard=True)